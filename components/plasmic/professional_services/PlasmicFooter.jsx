// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tTqxxSNNPLamhhbvK9V5UT
// Component: c7_nsHlFJRh2
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantshXfVib0KeY9U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hXFVib0keY9u/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_professional_services.module.css"; // plasmic-import: tTqxxSNNPLamhhbvK9V5UT/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: c7_nsHlFJRh2/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: UKDyGjDzmgXy/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iOWdtjEbitop/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: rbKsyDAAD6wv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: WWqicMcIQZr0/icon

createPlasmicElementProxy;

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshXfVib0KeY9U()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jq3UU)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nJPyO)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dw6B7)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pRkgS)}
            >
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__aYcSs
                )}
              >
                {"Company Name"}
              </h3>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f9YUk
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {"This site proudly built in "}
                  </React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__fI2Q3
                      )}
                      component={Link}
                      href={"https://www.plasmic.app"}
                      platform={"nextjs"}
                    >
                      {"Plasmic"}
                    </p.PlasmicLink>
                  }

                  <React.Fragment>{"."}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mmepe
                )}
              >
                {"Connect with us"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gcd1V)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__uN3Bt
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__r5HO5)}
                    role={"img"}
                  />
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__qUcgt
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__dMW0)}
                    role={"img"}
                  />
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__iu0Eq
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <Icon28Icon
                    className={classNames(projectcss.all, sty.svg___5Goai)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fnClQ)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__aIa4Y
              )}
            >
              {"Photography"}
            </h3>
            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__p7RJc
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__rCwe9)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fhKLj
                )}
              >
                {"Services"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__pZS)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__d1PtA
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__maCuO)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Cp3N
                )}
              >
                {"Stories"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__raTmC)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bvPPl)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3___3Mtk1
              )}
            >
              {"Company"}
            </h3>
            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___35Gkf
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__iz2Lo)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bpCgR
                )}
              >
                {"Contact us"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__ymW8)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__zDpJ
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__rO6Pk)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zXgx7
                )}
              >
                {"About us"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__ddqiY)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
